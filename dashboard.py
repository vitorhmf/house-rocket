import pandas as pd
import streamlit as st
import folium
import numpy as np
from streamlit_folium import folium_static
from folium.plugins import MarkerCluster

st.set_page_config(layout='wide',
                   page_title = 'Projeto House Rocket by Vitor Ferreira',
                   page_icon='rocket')
@st.cache(allow_output_mutation=True)

def get_data (path):
    data = pd.read_csv (path)
    return data


def set_feature (data):
    
    data['date'] = pd.to_datetime(data['date'])
    data['month'] = data['date'].dt.month
    data['year'] = data['date'].dt.year
    data['price_m2'] = data['price'] / data['sqft_lot']
    
    # Adicionando a coluna season
    for i in range(len(data)):
        if (data.loc[i, 'month'] <= 2 ) or (data.loc[i, 'month'] == 12):
            data.loc[i, 'season'] = 'Inverno'
        elif data.loc[i, 'month'] <= 5:
            data.loc[i, 'season'] = 'Primavera'
        elif data.loc[i, 'month'] <= 8:
            data.loc[i, 'season'] = 'Ver√£o'
        else:
            data.loc[i, 'season'] = 'Outono'

    # C√°lculo da mediana por regi√£o:
    df = data[['zipcode', 'price']].groupby('zipcode').median().reset_index()
    df = df.rename(columns={'price': 'median_price'})
    data = pd.merge( data, df, on='zipcode', how='inner')

    # Definindo regra para comprar ou n√£o comprar (pre√ßo 30% abaixo da mediana e condi√ß√£o maior ou igual a 4):
    for i in range(len(data)):
        if (data.loc[i, 'price'] < (data.loc[i, 'median_price']* 0.7)) & (data.loc[i, 'condition'] >= 4):
            data.loc[i, 'status'] = 'buy'
        else:
            data.loc [i, 'status'] = 'not_buy'  
    data_buy = data[(data['status'] == 'buy')] [['id', 'condition', 'date', 'season', 'zipcode', 'lat', 'long', 'price', 'median_price' ]]
    data_buy['%_difference'] = data_buy['price'] / data_buy['median_price']

    # Montando a tabela com as sugest√µes de compra:
    df_temp = data[['zipcode', 'season', 'price']].groupby(['zipcode', 'season']).median().reset_index()
    for i in range(len(df_temp)):
        df_temp.loc[i, 'concat'] = str(df_temp.loc[i, 'zipcode']) + '_' + str(df_temp.loc[i, 'price'])

    # Criando a tabela de "melhores condi√ß√µes"
    better_season = df_temp[['zipcode', 'price']].groupby('zipcode').max().reset_index()
    for i in range(len(better_season)):
        better_season.loc[i, 'concat'] = str(better_season.loc[i, 'zipcode']) + '_' + str(better_season.loc[i, 'price'])
    better_season = pd.merge( better_season, df_temp[['concat', 'season']], on='concat', how='inner')
    better_season.columns = ['zipcode', 'max_price', 'concat', 'better_season']
    data_complete = pd.merge (data_buy, better_season[['zipcode', 'better_season', 'max_price']], on='zipcode', how='inner')

    # Adicionando a sugest√£o de pre√ßo √† tabela principal (data_complete):
        # Sugest√£o de pre√ßo de revenda: 40% de lucro do pre√ßo de compra. 
    for i in range(len(data_complete)):
        data_complete.loc[i, 'sale_price'] = data_complete.loc[i, 'price'] * 1.4

    # Montando a tabela final:
    data_complete['profit'] = data_complete['sale_price'] - data_complete['price']
    data_final = data_complete[['zipcode', 'id', 'condition', 'median_price', 'price', 'sale_price', 'profit', 'better_season', 'max_price', 'lat', 'long']]
    data_final.columns = ['Zipcode', 'Id', 'Condi√ß√£o do Im√≥vel', 'Pre√ßo M√©dio da Regi√£o', 'Pre√ßo de Compra', 'Sugest√£o de Venda', 'Lucro', 'Quando Vender?', 'Melhor M√©dia', 'Latitude', 'Longitude']

    return data_final

def overview (data):

    #Configura√ß√£o da pagina:   
    st.title('Projeto House Rocket')
    st.image('seatle.jpg')
    st.write('### Identifica√ß√£o de im√≥veis para compra e revenda a fim de maximizar o lucro')
    st.markdown('A partir da an√°lise explorat√≥ria dos dados de um portf√≥lio com aproximadamente 22 mil im√≥veis em Seatle, foram selecionadas 811 casas como sugest√£o de compra. Todas est√£o anunciadas pelo menos 30% abaixo da m√©dia de pre√ßo da regi√£o e est√£o classificadas com um √≥timo estado de conserva√ß√£o (notas 4 e 5 em uma escala de 1 a 5).')
    st.markdown('Com rela√ß√£o a estrat√©gia comercial, foi analisado o per√≠odo do ano em que cada regi√£o apresentava maior m√©dia de pre√ßos, definindo assim quando √© melhor revender cada im√≥vel. E a precifica√ß√£o foi estipulada buscando um ROI de 40% do investimento realizado.')

    #Configura√ß√£o do menu lateral:
    with st.sidebar:
        st.image('house_rocket_logo.png')
        st.header('Etapas do projeto')
        st.markdown('''
            üìã [Vis√£o Geral do Portf√≥lio de Im√≥veis](#identifica-o-de-im-veis-para-compra-e-revenda-a-fim-de-maximizar-o-lucro) \n
            üìà [An√°lise do Investimento](#an-lise-do-investimento) \n
            üí° [Hip√≥teses de Neg√≥cio](#hip-teses-de-neg-cio) \n
            üìû[Contatos](#contatos)
            ''', unsafe_allow_html=True)
        st.markdown('''---''')
        st.header('An√°lise dos Im√≥veis Selecionados')

    #Vis√£o Geral dos dados
    st.header( 'Vis√£o Geral do Portf√≥lio de Im√≥veis' )
    st.dataframe(data)

    c1, c2 = st.columns((1,1))

    c1.write('### Valores M√©dios')
    df1 = data[['id', 'zipcode']].groupby('zipcode').count().reset_index()
    df2 = data[['price', 'zipcode']].groupby('zipcode').mean().reset_index()
    df3 = data[['sqft_living', 'zipcode']].groupby('zipcode').mean().reset_index()
    df4 = data[['price_m2', 'zipcode']].groupby('zipcode').mean().reset_index()

    m1 = pd.merge( df1, df2, on='zipcode', how='inner')
    m2 = pd.merge(m1, df3, on='zipcode', how='inner')
    df = pd.merge(m2, df4, on='zipcode', how='inner')
    df.columns = ['Zipcode', 'Qtde Im√≥veis', 'Pre√ßo', '√Årea', 'Pre√ßo/m2']
    c1.dataframe(df, height=500)

    c2.write('### An√°lise Descritiva')
    num_attributes = data.select_dtypes(include=['int64', 'float64'])
    media   = pd.DataFrame(num_attributes.apply(np.mean))
    mediana = pd.DataFrame(num_attributes.apply(np.median))
    std     = pd.DataFrame(num_attributes.apply(np.std))
    max_    = pd.DataFrame(num_attributes.apply(np.max))
    min_    = pd.DataFrame(num_attributes.apply(np.min))

    df1 = pd.concat( [max_, min_, media, mediana, std], axis=1 ).reset_index()
    df1.columns = ['Atributo', 'Max', 'Min', 'M√©dia', 'Mediana', 'Desvio']
    c2.dataframe(df1, height=500)

    st.markdown("""---""")
    
    return None


def answer (data_final):
    
    f_attributes = st.sidebar.multiselect('Selecione as informa√ß√µes que deseja avaliar', data_final.columns)
    f_zipcode = st.sidebar.multiselect('Escolha a regi√£o', data_final['Zipcode'].unique())

    st.header( 'An√°lise do Investimento' )
    st.write('### Retorno do Investimento')
    if (f_zipcode !=[]):
        qtde_imoveis = np.count_nonzero(data_final['Pre√ßo de Compra'].loc[data_final['Zipcode'].isin(f_zipcode)])
        investimento = sum(data_final['Pre√ßo de Compra'].loc[data_final['Zipcode'].isin(f_zipcode)])
        receita = sum(data_final['Sugest√£o de Venda'].loc[data_final['Zipcode'].isin(f_zipcode)])
        roi = receita / investimento -1
    else:
        qtde_imoveis = np.count_nonzero(data_final['Pre√ßo de Compra'])
        investimento = sum(data_final['Pre√ßo de Compra'])
        receita = sum(data_final['Sugest√£o de Venda'])
        roi = receita / investimento -1

    c1, c2, c3, c4 = st.columns((1,1,1,1))
    c1.write(f'Qtd de Im√≥veis: {qtde_imoveis:.0f}')
    c2.write(f'Investimento: R$ {investimento:,.2f}')
    c3.write(f'Receita: R$ {receita:,.2f}')
    c4.write(f'ROI: {roi:.0%}')

    #Im√≥veis selecionados:
    st.write('### Descri√ß√£o dos Im√≥veis Selecionados')

    if (f_zipcode !=[]) & (f_attributes !=[]):
        data_table = data_final.loc[data_final['Zipcode'].isin(f_zipcode), f_attributes]
    elif (f_zipcode !=[]) & (f_attributes == []):
        data_table = data_final.loc[data_final['Zipcode'].isin(f_zipcode), : ]
    elif (f_zipcode == []) & (f_attributes !=[]):
        data_table = data_final.loc[: , f_attributes]
    else:
        data_table = data_final.copy()

    st.dataframe(data_table)

    # Gr√°fico com o Folium:
  

    st.write('### Visualiza√ß√£o no Mapa')
    # Filtro do gr√°fico
    if (f_zipcode !=[]):
        data_graf= data_final.loc[data_final['Zipcode'].isin(f_zipcode), :]
    else:
        data_graf = data_final.copy()

    # Plotar o gr√°fico
    density_map = folium.Map(location = [data_graf['Latitude'].mean(), data_graf['Longitude'].mean()],
                             width='100%',
                             height= '80%',
                             default_zoom_start = 15,
                            )
                                        
    marker_cluster = MarkerCluster().add_to(density_map)

    for name, row in data_graf.iterrows():
        folium.Marker( [row['Latitude'], row['Longitude']], 
            popup =  
                'Id: {0} \n Zipcode: {1}'. format( 
                    row['Id'],
                    row['Zipcode'])).add_to(marker_cluster)
        
    
    folium_static(density_map)

    st.markdown("""---""")
    
    return None

def analysis(data):
    st.header('Hip√≥teses de Neg√≥cio')
    st.write('Abaixo s√£o apresentadas an√°lises complementares dos dados, validando hip√≥teses que possam gerar a√ß√µes e auxiliar no direcionamento da tomada de decis√£o da empresa.')

    #1:
    st.write('#### Hip√≥tese 1: o crescimento do pre√ßo dos im√≥veis de 2014 para 2015 foi de 10%.')
    #st.subheader('Hip√≥tese 1: o crescimento do pre√ßo dos im√≥veis de 2014 para 2015 foi de 10%.')
    price_yr = data[['price', 'year']].groupby('year').mean().reset_index()
    yoy = price_yr.loc[1, 'price'] / price_yr.loc[0, 'price'] -1
    st.write(f'R: o crescimento m√©dio dos pre√ßos no per√≠odo foi de {yoy:.1%}.')

    #2:
    st.write('#### Hip√≥tese 2: im√≥veis que possuem vista para √°gua s√£o 20% mais caros na m√©dia.')
    price_wf = data[['waterfront', 'price']].groupby('waterfront').mean().reset_index()
    price_wf = price_wf.loc[1, 'price'] / price_wf.loc[0, 'price'] -1
    st.write(f'R: im√≥veis com vista para a √°gua s√£o {price_wf:.1%} mais caros que os demais.')

    #3:
    st.write('#### Hip√≥tese 3: a √°rea dos imoveis com vista para a agua, em m√©dia, √© 50% maior que os demais.')
    wf_1 = data[data['waterfront'] == 1]['sqft_lot'].mean()
    wf_0 = data[data['waterfront'] == 0]['sqft_lot'].mean()
    rate_wf = wf_1 / wf_0 -1
    st.write(f'R: os im√≥veis que possuem vista para a √°gua s√£o, em m√©dia, {rate_wf:.1%} maiores que os demais.')

    #4:
    st.write('#### Hip√≥tese 4: im√≥veis sem por√£o possuem √°rea total 40% maior que os imoveis com por√£o.')
    without_basement = data[(data['sqft_basement'] == 0)]['sqft_lot'].mean()
    with_basement = data[(data['sqft_basement'] > 0)] ['sqft_lot'].mean()
    rate_basement = without_basement / with_basement -1
    st.write(f'R: Im√≥veis sem por√£o possuem uma √°rea em m√©dia {rate_basement:.1%} maior que os im√≥veis com por√£o.')

    #5: Hip√≥tese sem a√ß√£o (colocar MoM na primeira quest√£o faz mais sentido do que YoY)
    st.write('#### Hip√≥tese 5: im√≥veis com 3 banheiros tiveram um crescimento de 15% ao m√™s (MoM)')
    bathroom3 = data[(data['bathrooms'] == 3)][['price', 'year', 'month']]
    bathroom3 = bathroom3[['price', 'year', 'month']].groupby(['year', 'month']).mean().reset_index()
    bathroom3['diff'] = bathroom3['price'].diff()
    bathroom3['MoM'] = bathroom3['price'].pct_change()
    bathroom3

    #6:
    st.write('#### Hip√≥tese 6: im√≥veis que foram reformados e est√£o em boas condi√ß√µes s√£o, em m√©dia, 20% mais caros que os n√£o reformados nas mesmas condi√ß√µes.')
    condition3_4 = data[(data['condition'] == 3) | (data['condition'] == 4)] [['price', 'yr_renovated', 'condition']]
    not_renovated = condition3_4[(condition3_4['yr_renovated'] == 0)].mean()
    renovated = condition3_4[(condition3_4['yr_renovated'] != 0)].mean()
    ratio3_4 = renovated['price'] / not_renovated['price'] -1
    st.write(f'R: Os im√≥veis reformados s√£o em m√©dia {ratio3_4:.1%} mais caros que im√≥veis nas mesmas condi√ß√µes que n√£o foram reformados.')

    #7:
    st.write('#### Hip√≥tese 7: im√≥veis em m√°s condi√ß√µes s√£o 20% mais baratos que imoveis em boas condi√ß√µes.')
    condition = data[['price', 'condition']].groupby('condition').mean().reset_index()
    mean_bad = condition[(condition['condition'] <=2)]['price'].mean()
    mean_good = condition[(condition['condition'] > 2 ) & (condition['condition'] < 5)]['price'].mean()
    mean_great = condition[(condition['condition'] == 5)]['price'].mean()
    ratio_bad_good = 1- mean_bad / mean_good 
    ratio_bad_great = 1- mean_bad / mean_great
    st.write(f'R: Im√≥veis em m√°s condi√ß√µes s√£o em m√©dia {ratio_bad_good:.1%} mais baratos que im√≥veis em boas condi√ß√µes e s√£o {ratio_bad_great:.1%} mais baratos que im√≥veis em √≥timas condi√ß√µes.')

    #8:.\venve
    st.write('#### Hip√≥tese 8: im√≥veis constru√≠dos depois dos anos 2000 possuem √°rea total 20% menor que os demais.')
    mean_2000 = data[data['yr_built'] >= 2000] ['sqft_lot']. mean()
    mean_1900 = data[data['yr_built'] < 2000] ['sqft_lot']. mean()
    ratio_sqft2000 = 1- mean_2000 / mean_1900
    st.write(f'R: Im√≥veis constru√≠dos depois dos anos 2000 s√£o em m√©dia {ratio_sqft2000:.1%} menores que os demais.')

    #9:
    st.write('#### Hip√≥tese 9: imoveis constru√≠dos depois dos anos 2000 s√£o 30% mais caros que os demais')
    price_1900 = data[data['yr_built'] < 2000] ['price']. mean()
    price_2000 = data[data['yr_built'] >= 2000] ['price']. mean()
    ratio_price2000 = price_2000 / price_1900 -1
    st.write(f'R: Im√≥veis constru√≠dos depois dos anos 2000 s√£o em m√©dia {ratio_price2000:.1%} mais caros que os demais.')

    #10:
    st.write('#### Hip√≥tese 10: im√≥veis com data de constru√ß√£o menor que 1955 s√£o 50% mais baratos na m√©dia.')
    # Mediana de pre√ßo dos imoveis construidos depois de 1955
    over_55 = data[(data['yr_built'] > 1955)]['price'].mean()
    under_55 = data[(data['yr_built'] <= 1955)]['price'].mean()
    ratio_price55 = 1- under_55 / over_55
    st.write(f'R: Im√≥veis constru√≠dos antes de 1955 s√£o em m√©dia {ratio_price55:.1%} mais baratos.')
    st.write('*Os dados utilizados nesse projeto s√£o fict√≠cios e foram retirados do site: https://www.kaggle.com/datasets/shivachandel/kc-house-data')
    
    #Configura√ß√µes de contatos:
    st.markdown("""---""")
    st.header('Contatos')
    st.write('''[ü§ù Linkedin](https://www.linkedin.com/in/vitorhmf/) ‚îÇ 
                [üíº Portf√≥lio](https://vitorhmf.github.io/portfolio/) |
                [üìÅ GitHub](https://github.com/vitorhmf)''' )
    with st.sidebar:
        st.markdown("""---""")
        st.header('Sobre o Autor')
        st.image('perfil.jpg')
        st.write('Ol√°! Meu nome √© Vitor Ferreira, tenho 14 anos de experi√™ncia de mercado com foco em Gest√£o de Neg√≥cios e Gest√£o Comercial.')
        st.write('Sou apaixonado por Ci√™ncia de Dados e acredito que a cada dia a an√°lise de dados vai influenciar mais na tomada de decis√£o de empresas e l√≠deres, independente da sua √°rea de atua√ß√£o.')
        st.markdown("""---""")
        st.header('Contatos')
        st.write('''[ü§ù Linkedin](https://www.linkedin.com/in/vitorhmf/) ‚îÇ 
                    [üíº Portf√≥lio](https://vitorhmf.github.io/portfolio/) |
                    [üìÅ GitHub](https://github.com/vitorhmf)''' )
    return None

if __name__ == '__main__':
    path = 'kc_house_data.csv'
    data = get_data(path) 
    data_final = set_feature(data)
    overview (data)
    answer(data_final)
    analysis(data)